name: Deploy to server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/pi/Event-it-API
            git reset --hard
            git pull
            docker-compose down
            docker-compose build
            docker-compose up -d
            sleep 30 # wait for containers to start

            # Ensure the .env file exists
            if [ ! -f /var/www/html/.env ]; then
              echo "Creating .env file"
              touch /var/www/html/.env
            fi

            # Ensure proper permissions
            sudo chown www-data:www-data /var/www/html/.env
            sudo chmod 644 /var/www/html/.env

            docker-compose exec -T backend composer install
            docker-compose exec -T db bash -c "
              wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh -O /wait-for-it.sh && \
              chmod +x /wait-for-it.sh && \
              /wait-for-it.sh localhost:3307 -t 60
            "
            DB_EXISTS=$(docker-compose exec -T db mysql -u event-it -ppassword-for-event-it -e "SHOW DATABASES LIKE 'event-API';" | grep "event-API")
            if [ -z "$DB_EXISTS" ]; then
              echo "Database does not exist, creating..."
              docker-compose exec -T backend php src/bin/doctrine.php orm:schema-tool:create
              echo "Database created."
            fi

  update_collection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Update Postman Collection
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          chmod +x -R ./.github/
          ./.github/scripts/postmanUpdate.sh ${{ secrets.POSTMAN_API_KEY }}
